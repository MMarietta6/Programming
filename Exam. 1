#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 3
#define COLUMNS 4

// Prototypes
int InputOfN(char[]);
void GenerateMatrix(int A[ROWS][COLUMNS], int maxValue);
void FindSumOfColumn(int A[ROWS][COLUMNS], int N, int sum[COLUMNS]);
void OutputSums(int sum[COLUMNS]);
void DisplayMatrix(int A[ROWS][COLUMNS]);

// Main function
int main() {
    int N;
    int A[ROWS][COLUMNS]; 
    int sum[COLUMNS] = {0}; 

    N = InputOfN("Enter N: ");
    GenerateMatrix(A, N);
    DisplayMatrix(A);
    FindSumOfColumn(A, N, sum); 
    OutputSums(sum); 

    return 0;
}

// Function to input N
int InputOfN(char message[]) {
    int N;
    printf("%s", message);
    scanf("%d", &N);
    return N;
}

// Function to generate a matrix with random values
void GenerateMatrix(int A[ROWS][COLUMNS], int maxValue) {
    srand(time(NULL));
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            A[i][j] = rand() % maxValue;
        }
    }
    
    int row = rand() % ROWS; 
    int col = rand() % COLUMNS; 
    A[row][col] = maxValue + rand() % 10; 
}

// Function to find the sum of elements in each column that are less than N
void FindSumOfColumn(int A[ROWS][COLUMNS], int N, int sum[COLUMNS]) {
    for (int j = 0; j < COLUMNS; j++) {
        for (int i = 0; i < ROWS; i++) {
            if (A[i][j] < N) {
                sum[j] += A[i][j];
            }
        }
    }
}

// Function to output the sums for each column
void OutputSums(int sum[COLUMNS]) {
    printf("Sums of elements less than N for each column:\n");
    for (int j = 0; j < COLUMNS; j++) {
        printf("Sum of column %d: %d\n", j, sum[j]);
    }
}

// Function to display the generated matrix
void DisplayMatrix(int A[ROWS][COLUMNS]) {
    printf("Generated Matrix:\n");
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }
}
